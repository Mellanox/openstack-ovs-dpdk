diff --git a/nova/network/os_vif_util.py b/nova/network/os_vif_util.py
index 0bfd87b..f02a1ba 100644
--- a/nova/network/os_vif_util.py
+++ b/nova/network/os_vif_util.py
@@ -281,13 +281,19 @@ def _get_vnic_direct_vif_instance(vif, port_profile, plugin, set_bridge=True):
     :returns: an os_vif.objects.vif.VIFHostDevice instance
     """
 
+    dev_type = objects.fields.VIFHostDeviceDevType.ETHERNET
+    if (vif['details'].get(model.VIF_DETAILS_OVS_DATAPATH_TYPE) ==
+            model.VIF_DETAILS_OVS_DATAPATH_NETDEV
+            and plugin == "ovs"):
+        dev_type = objects.fields.VIFHostDeviceDevType.GENERIC
+
     obj = _get_vif_instance(
         vif,
         objects.vif.VIFHostDevice,
         port_profile=port_profile,
         plugin=plugin,
         dev_address=vif["profile"]["pci_slot"],
-        dev_type=objects.fields.VIFHostDeviceDevType.ETHERNET
+        dev_type=dev_type
     )
     if set_bridge and vif["network"]["bridge"] is not None:
         obj.network.bridge = vif["network"]["bridge"]
@@ -308,6 +314,8 @@ def _get_ovs_representor_port_profile(vif):
     # during Train.
     return objects.vif.VIFPortProfileOVSRepresentor(
         interface_id=vif.get('ovs_interfaceid') or vif['id'],
+        datapath_type=vif['details'].get(
+            model.VIF_DETAILS_OVS_DATAPATH_TYPE),
         representor_name=_get_vif_name(vif),
         representor_address=vif["profile"]['pci_slot'])
 
@@ -421,6 +429,9 @@ def _nova_to_osvif_vif_vhostuser(vif):
         if vif["network"]["bridge"] is not None:
             obj.bridge_name = vif["network"]["bridge"]
         _set_vhostuser_settings(vif, obj)
+        vnic_type = vif.get('vnic_type', model.VNIC_TYPE_NORMAL)
+        if vnic_type == model.VNIC_TYPE_VIRTIO_FORWARDER:
+            _set_representor_datapath_offload_settings(vif, obj)
         return obj
     elif vif['details'].get(model.VIF_DETAILS_VHOSTUSER_VROUTER_PLUG, False):
         obj = _get_vif_instance(vif, objects.vif.VIFVHostUser,
diff --git a/nova/virt/libvirt/vif.py b/nova/virt/libvirt/vif.py
index 2d01da24..e4a9380 100644
--- a/nova/virt/libvirt/vif.py
+++ b/nova/virt/libvirt/vif.py
@@ -502,13 +502,10 @@ class LibvirtGenericVIFDriver(object):
             designer.set_vif_host_backend_hw_veb(
                 conf, 'hostdev', vif.dev_address, None)
         else:
-            # TODO(jangutter): dev_type == VIFHostDeviceDevType.GENERIC
-            # is currently unsupported under os-vif. The corresponding conf
-            # class would be: LibvirtConfigGuestHostdevPCI
-            # but os-vif only returns a LibvirtConfigGuestInterface object
-            raise exception.InternalError(
-                _("Unsupported os-vif VIFHostDevice dev_type %(type)s") %
-                {'type': vif.dev_type})
+            # for dev_type == VIFHostDeviceDevType.GENERIC the corresponding
+            # conf class is: LibvirtConfigGuestHostdevPCI
+            designer.set_vif_host_backend_hostdev_pci_config(
+                conf, vif.dev_address)
 
     def _set_config_VIFPortProfileOpenVSwitch(self, profile, conf):
         conf.vporttype = "openvswitch"
@@ -536,13 +533,20 @@ class LibvirtGenericVIFDriver(object):
         :param host: nova.virt.libvirt.host.Host
         :param vnic_type: vnic type
 
-        :returns: nova.virt.libvirt.config.LibvirtConfigGuestInterface
+        :returns: nova.virt.libvirt.config.LibvirtConfigGuestInterface or
+            nova.virt.libvirt.config.LibvirtConfigGuestHostdevPCI
         """
 
-        # Do the config that's common to all vif types
-        conf = self.get_base_config(instance, vif.address, image_meta,
-                                    inst_type, virt_type, vnic_type,
-                                    host)
+        if (isinstance(vif, os_vif.objects.vif.VIFHostDevice) and
+                vif.dev_type == osv_fields.VIFHostDeviceDevType.GENERIC):
+            conf = vconfig.LibvirtConfigGuestHostdevPCI()
+            pci_slot = vif.port_profile.representor_address
+            designer.set_vif_host_backend_hostdev_pci_config(conf, pci_slot)
+        else:
+            # Do the config that's common to all vif types
+            conf = self.get_base_config(instance, vif.address, image_meta,
+                                        inst_type, virt_type, vnic_type,
+                                        host)
 
         # Do the VIF type specific config
         if isinstance(vif, osv_vifs.VIFGeneric):
