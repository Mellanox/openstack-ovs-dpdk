diff --git a/vif_plug_ovs/constants.py b/vif_plug_ovs/constants.py
index 1eece80..c14ba4e 100644
--- a/vif_plug_ovs/constants.py
+++ b/vif_plug_ovs/constants.py
@@ -24,5 +24,8 @@ PLATFORM_WIN32 = 'win32'
 
 OVS_DPDK_INTERFACE_TYPE = 'dpdk'
 
+OVS_VDPA_TYPE = 'dpdkvdpa'
+OVS_VDPA_PREFIX = 'vdp'
+
 # Neutron dead VLAN.
 DEAD_VLAN = 4095
diff --git a/vif_plug_ovs/linux_net.py b/vif_plug_ovs/linux_net.py
index 20baab3..0b9cb60 100644
--- a/vif_plug_ovs/linux_net.py
+++ b/vif_plug_ovs/linux_net.py
@@ -168,6 +168,10 @@ def set_interface_state(interface_name, port_state):
     ip_lib.set(interface_name, state=port_state, check_exit_code=[0, 2, 254])
 
 
+@privsep.vif_plug.entrypoint
+def set_vf_mac_address(pf_ifname, vf_num, address):
+    processutils.execute("ip", "link", "set", pf_ifname, "vf", vf_num, "mac", address)
+
 def _parse_vf_number(phys_port_name):
     """Parses phys_port_name and returns VF number or None.
 
diff --git a/vif_plug_ovs/ovs.py b/vif_plug_ovs/ovs.py
index 9516f79..f6876ab 100644
--- a/vif_plug_ovs/ovs.py
+++ b/vif_plug_ovs/ovs.py
@@ -176,20 +176,39 @@ class OvsPlugin(plugin.PluginBase):
             return datapath
         return profile.datapath_type
 
+    @staticmethod
+    def _get_vif_datapath_offload(vif):
+        profile = vif.port_profile
+        if 'datapath_offload' in profile and profile.datapath_offload:
+            return profile.datapath_offload
+
     def _plug_vhostuser(self, vif, instance_info):
         self.ovsdb.ensure_ovs_bridge(
             vif.network.bridge, self._get_vif_datapath_type(
                 vif, datapath=constants.OVS_DATAPATH_NETDEV))
         vif_name = OvsPlugin.gen_port_name(
             constants.OVS_VHOSTUSER_PREFIX, vif.id)
+        dp_rep = self._get_vif_datapath_offload(vif)
+
         args = {}
-        if vif.mode == "client":
-            args['interface_type'] = \
-                constants.OVS_VHOSTUSER_INTERFACE_TYPE
+
+        if dp_rep:
+            vif_name = OvsPlugin.gen_port_name(
+                constants.OVS_VDPA_PREFIX, vif.id)
+            pci_slot = dp_rep.representor_address
+            args['vf_pci'] = pci_slot
+            args['pf_pci'] = linux_net.get_pf_pci_from_vf(pci_slot)
+            args['vf_num'] = linux_net.get_vf_num_by_pci_address(pci_slot)
+            args['interface_type'] = constants.OVS_VDPA_TYPE
+            args['vdpa_socket_path'] = vif.path
         else:
-            args['interface_type'] = \
-                constants.OVS_VHOSTUSER_CLIENT_INTERFACE_TYPE
-            args['vhost_server_path'] = vif.path
+            if vif.mode == "client":
+                args['interface_type'] = \
+                    constants.OVS_VHOSTUSER_INTERFACE_TYPE
+            else:
+                args['interface_type'] = \
+                    constants.OVS_VHOSTUSER_CLIENT_INTERFACE_TYPE
+                args['vhost_server_path'] = vif.path
 
         self._create_vif_port(
             vif, vif_name, instance_info, **args)
@@ -273,7 +292,18 @@ class OvsPlugin(plugin.PluginBase):
             kwargs = {'interface_type': constants.OVS_DPDK_INTERFACE_TYPE,
                       'pf_pci': pf_pci,
                       'vf_num': vf_num}
+
         self._create_vif_port(*args, **kwargs)
+        if datapath != constants.OVS_DATAPATH_SYSTEM:
+            try:
+                pf_ifname = linux_net.get_ifname_by_pci_address(
+                    pci_slot, pf_interface=True, switchdev=True)
+                linux_net.set_vf_mac_address(
+                    pf_ifname, int(vf_num), vif.address)
+            except exception.PciDeviceNotFoundById:
+                # could not find net device for the PCI, skipped setting
+                # MAC address.
+                pass
 
     def plug(self, vif, instance_info):
         if not hasattr(vif, "port_profile"):
@@ -299,10 +329,16 @@ class OvsPlugin(plugin.PluginBase):
             self._plug_vf(vif, instance_info)
 
     def _unplug_vhostuser(self, vif, instance_info):
-        self.ovsdb.delete_ovs_vif_port(vif.network.bridge,
-            OvsPlugin.gen_port_name(
-                constants.OVS_VHOSTUSER_PREFIX,
-                vif.id))
+        dp_rep = self._get_vif_datapath_offload(vif)
+        if dp_rep:
+            vif_name = OvsPlugin.gen_port_name(
+                constants.OVS_VDPA_PREFIX, vif.id)
+        else:
+            vif_name = OvsPlugin.gen_port_name(
+                constants.OVS_VHOSTUSER_PREFIX, vif.id)
+
+        self.ovsdb.delete_ovs_vif_port(vif.network.bridge, vif_name)
+
 
     def _unplug_bridge(self, vif, instance_info):
         """UnPlug using hybrid strategy
diff --git a/vif_plug_ovs/ovsdb/ovsdb_lib.py b/vif_plug_ovs/ovsdb/ovsdb_lib.py
index 8f48193..45f0afb 100644
--- a/vif_plug_ovs/ovsdb/ovsdb_lib.py
+++ b/vif_plug_ovs/ovsdb/ovsdb_lib.py
@@ -63,7 +63,8 @@ class BaseOVS(object):
     def create_ovs_vif_port(self, bridge, dev, iface_id, mac, instance_id,
                             mtu=None, interface_type=None,
                             vhost_server_path=None, tag=None,
-                            pf_pci=None, vf_num=None):
+                            pf_pci=None, vf_num=None, vf_pci=None,
+                            vdpa_socket_path=None):
         """Create OVS port
 
         :param bridge: bridge name to create the port on.
@@ -77,11 +78,17 @@ class BaseOVS(object):
         :param tag: OVS interface tag.
         :param pf_pci: PCI address of PF for dpdk representor port.
         :param vf_num: VF number of PF for dpdk representor port.
+        :param vf_pci: PCI address of dpdk representor port.
+        :param vdpa_socket_path: path to socket file of vDPA port.
 
         .. note:: create DPDK representor port by setting all three values:
             `interface_type`, `pf_pci` and `vf_num`. if interface type is
             not `OVS_DPDK_INTERFACE_TYPE` then `pf_pci` and `vf_num` values
             are ignored.
+
+        .. note:: create vDPA port by setting all five values:
+            `interface_type`, `pf_pci`, `vf_num`, `vf_pci` and
+            `vdpa_socket_path`.
         """
         external_ids = {'iface-id': iface_id,
                         'iface-status': 'active',
@@ -93,12 +100,19 @@ class BaseOVS(object):
         if vhost_server_path:
             col_values.append(('options',
                                {'vhost-server-path': vhost_server_path}))
+
+        devargs_string = "{PF_PCI},representor=[{VF_NUM}]".format(
+            PF_PCI=pf_pci, VF_NUM=vf_num) if pf_pci and vf_num else None
         if (interface_type == constants.OVS_DPDK_INTERFACE_TYPE and
-                pf_pci and vf_num):
-            devargs_string = "{PF_PCI},representor=[{VF_NUM}]".format(
-                PF_PCI=pf_pci, VF_NUM=vf_num)
+                devargs_string):
             col_values.append(('options',
                               {'dpdk-devargs': devargs_string}))
+        if (interface_type == constants.OVS_VDPA_TYPE and
+                devargs_string and vdpa_socket_path):
+            col_values.append(('options',
+                               {'vdpa-socket-path': vdpa_socket_path,
+                                'vdpa-accelerator-devargs': vf_pci,
+                                'dpdk-devargs': devargs_string}))
         with self.ovsdb.transaction() as txn:
             txn.add(self.ovsdb.add_port(bridge, dev))
             if tag:
